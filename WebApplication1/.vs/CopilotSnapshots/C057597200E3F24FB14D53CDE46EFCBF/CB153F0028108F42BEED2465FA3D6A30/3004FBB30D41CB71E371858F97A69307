using Serilog;
using Serilog.Events;
using Microsoft.EntityFrameworkCore;
using Infrastructure.Data;

var builder = WebApplication.CreateBuilder(args);

// Serilog setup
builder.Host.UseSerilog((_, conf) =>
{
    conf
        .MinimumLevel.Debug()
        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
        .Enrich.FromLogContext()
        .WriteTo.Console();
});

builder.Services.AddControllers();

// Add Swagger services
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services
    .AddDbContext<AppDbContext>(opts =>
    {
        opts
            .UseNpgsql(
                builder.Configuration.GetConnectionString("DefaultConnection"),
                optionsBuilder =>
                {
                })
            .EnableSensitiveDataLogging();
    })
    .AddScoped<IUnitOfWork, UnitOfWork<AppDbContext>>();

builder.Services.AddMediatR(cfg =>
{
    cfg.RegisterServicesFromAssembly(typeof(Program).Assembly);
});

var app = builder.Build();

// Enable Swagger middleware
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();