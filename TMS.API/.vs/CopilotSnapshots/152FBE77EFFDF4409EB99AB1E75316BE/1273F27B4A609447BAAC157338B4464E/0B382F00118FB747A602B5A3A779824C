using MediatR;
using TMS.Application.Common.infra;
using BCrypt.Net;

namespace TMS.Application.features.User.Put
{
    public class UpdateUserHandler : IRequestHandler<UpdateUserCommand, UpdateUserResponse>
    {
        private readonly IUnitOfWork _unitOfWork;
        public UpdateUserHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        public async Task<UpdateUserResponse> Handle(UpdateUserCommand request, CancellationToken cancellationToken)
        {
            var repo = _unitOfWork.Repository<Entities.User, int>();
            var user = await repo.GetByIdAsync(request.Id);
            if (user == null)
                return new UpdateUserResponse { Success = false };
            var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.Password);
            user.Update(request.FullName, request.Email, request.Role, passwordHash);
            repo.Update(user);
            await _unitOfWork.CommitAsync();
            return new UpdateUserResponse
            {
                Success = true,
                Name = user.FullName,
                Email = user.Email,
                Role = user.Role
            };
        }
    }
}