using TMS.Application.Common.infra;
using MediatR;

namespace TMS.Application.features.User.Put
{
    public class UpdateUserHandler : IRequestHandler<UpdateUserCommand, UpdateUserResponse>
    {
        private readonly IUnitOfWork _unitOfWork;
        public UpdateUserHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        public async Task<UpdateUserResponse> Handle(UpdateUserCommand request, CancellationToken cancellationToken)
        {
            var User = await _unitOfWork.Repository<Entities.User, int>().GetByIdAsync(request.Id);
            if (User == null)
            {
                return new UpdateUserResponse { Success = false };
            }
            User.Update(request.FullName, request.Email, request.Role);


            _unitOfWork.Repository<Entities.User, int>().Update(User);

            if (await _unitOfWork.CommitAsync() > 0)
            {
                return new UpdateUserResponse
                {
                    Id = User.Id,
                    FullName = User.FullName,
                    Email = User.Email,
                    Role = User.Role,
                    Success = true
                };
            }
            else
            {
                throw new InvalidOperationException("Failed to create User.");

            }
        }
    }
}