using TMS.Application.features.Task.Get;
using TMS.Infrastructure.Data;
using Get = TMS.Application.features.Task.Get;
using Task = TMS.Application.Entities.Task;

namespace TMS.Infrastructure.Repositories
{
    public class TaskRepository : Get.IRepository
    {
        private readonly AppDbContext _dbContext;
        public TaskRepository(AppDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public List<Task> GetAllTasks(ResourseParameter resourse)
        {
            var query = _dbContext.Tasks.AsQueryable();

            // Filtering by search query (Title or Description)
            if (!string.IsNullOrWhiteSpace(resourse.SearchQuery))
            {
                var search = resourse.SearchQuery.Trim().ToLower();
                query = query.Where(t => t.Title.ToLower().Contains(search) || t.Description.ToLower().Contains(search));
            }

            // Sorting
            if (!string.IsNullOrWhiteSpace(resourse.OrderBy))
            {
                switch (resourse.OrderBy.ToLower())
                {
                    case "title":
                        query = query.OrderBy(t => t.Title);
                        break;
                    case "duedate":
                        query = query.OrderBy(t => t.DueDate);
                        break;
                    case "status":
                        query = query.OrderBy(t => t.Status);
                        break;
                    default:
                        query = query.OrderBy(t => t.Title);
                        break;
                }
            }

            // Paging
            int skip = (resourse.PageNumber - 1) * resourse.PageSize;
            query = query.Skip(skip).Take(resourse.PageSize);

            return query.ToList();
        }
    }
}
