using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Serilog;
using Serilog.Events;
using System.Text;
using TMS.API.Helper;
using TMS.API.Helpers.Entensions;
using TMS.Application.Common.infra;
using TMS.Application.Entities;
using TMS.Application.features.User.Get;
using TMS.Infrastructure.Data;
using TMS.Infrastructure.Repositories;
using TaskGet = TMS.Application.features.Task.Get;
using Team = TMS.Application.features.Team.Get;
using UserDelete = TMS.Application.features.User.Delete;
using UserLogin = TMS.Application.features.User.Login;
using UserPost = TMS.Application.features.User.Post;
using UserPut = TMS.Application.features.User.Put;
var builder = WebApplication.CreateBuilder(args);

// Serilog setup
builder.Host.UseSerilog((_, conf) =>
{
    conf
        .MinimumLevel.Debug()
        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
        .Enrich.FromLogContext()
        .WriteTo.Console();
});

builder.Services.AddControllers();

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "TMS API", Version = "v1" });

    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT"
    });

});

builder.Services
    .AddDbContext<AppDbContext>(opts =>
    {
        opts.UseNpgsql(
                builder.Configuration.GetConnectionString("DefaultConnection"),
                npgsqlOptions =>
                {
                    npgsqlOptions.MigrationsAssembly("TMS.API");
                })
            .EnableSensitiveDataLogging();
    })
    .AddScoped<IUnitOfWork, UnitOfWork<AppDbContext>>();

builder.Services.AddIdentity<User, IdentityRole>()
    .AddEntityFrameworkStores<AppDbContext>()
    .AddDefaultTokenProviders();
builder.Services.AddScoped<IRepository, UserRepository>();
builder.Services.AddScoped<Team.IRepository, TeamRepository>();
builder.Services.AddScoped<TaskGet.IRepository, TaskRepository>();
builder.Services.AddScoped<UserPut.IRepository, UserRepository>();
builder.Services.AddScoped<UserPost.IRepository, UserRepository>();
builder.Services.AddScoped<UserDelete.IRepository, UserRepository>();
builder.Services.AddScoped<UserLogin.IRepository, UserRepository>();
builder.Services.AddMediatR(cfg =>
{
    cfg.RegisterServicesFromAssembly(typeof(Program).Assembly);
    cfg.RegisterServicesFromAssembly(typeof(GetUserHandler).Assembly);

});
builder.Services.AddHostedService<MigrationService>();
var jwtKey = builder.Configuration["Jwt:Key"];
var jwtIssuer = builder.Configuration["Jwt:Issuer"];

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});
var app = builder.Build();

// Seed roles and users
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    await SeedData.InitializeAsync(services);
}



// Enable Swagger middleware
if (true)
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "TMS API");
    });
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();