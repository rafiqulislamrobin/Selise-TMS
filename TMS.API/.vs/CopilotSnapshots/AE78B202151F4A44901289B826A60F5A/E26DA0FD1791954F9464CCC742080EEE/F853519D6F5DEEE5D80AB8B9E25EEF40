using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TMS.Application.features.Team.Delete;
using TMS.Application.features.Team.Get;
using TMS.Application.features.Team.Post;
using TMS.Application.features.Team.Put;
using TMS.Application.features.User.Get;
using ResourseParameter = TMS.Application.features.Team.Get.ResourseParameter;

namespace WebApplication1.Controllers
{
    [Route("TMS/api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class TeamController : Controller
    {
        private readonly IMediator _mediator;

        public TeamController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet("", Name = "GetTeams")]
        public async Task<IActionResult> GetTeam([FromQuery] ResourseParameter resource)
        {
            var response = await _mediator.Send(new GetTeamQuery(resource));
            return Ok(response);
        }

        [HttpPost]
        public async Task<IActionResult> CreateTeam([FromBody] CreateTeamCommand command)
        {
            var response = await _mediator.Send(command);
            return CreatedAtRoute("GetTeams", new { }, response);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateTeam(int id, [FromBody] PutTeamCommand command)
        {
            if (id != command.Id)
                return BadRequest();
            var response = await _mediator.Send(command);
            if (response == null || !response.Success)
                return NotFound();
            return Ok(response);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTeam(int id)
        {
            var response = await _mediator.Send(new DeleteTeamCommand(id));
            if (response == null || !response.Success)
                return NotFound(response?.Message);
            return Ok(response);
        }
    }
}
