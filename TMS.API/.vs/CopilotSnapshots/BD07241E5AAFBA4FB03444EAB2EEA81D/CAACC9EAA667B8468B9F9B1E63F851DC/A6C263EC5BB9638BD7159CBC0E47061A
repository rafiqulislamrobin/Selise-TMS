using MediatR;
using TMS.Application.Common.infra;
using TMS.Application.Entities;

namespace TMS.Application.features.Task.Get
{
    public class GetTaskHandler : IRequestHandler<GetTaskQuery, List<TaskResponse>>
    {
        private readonly IUnitOfWork _unitOfWork;
        public GetTaskHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        public async Task<List<TaskResponse>> Handle(GetTaskQuery request, CancellationToken cancellationToken)
        {
            var repo = _unitOfWork.Repository<Entities.Task, int>();
            var query = repo.Query();
            if (request.TeamId.HasValue)
                query = query.Where(t => t.TeamId == request.TeamId.Value);
            if (request.AssignedToUserId.HasValue)
                query = query.Where(t => t.AssignedToUserId == request.AssignedToUserId.Value);
            if (request.Status.HasValue)
                query = query.Where(t => (int)t.Status == request.Status.Value);
            var tasks = query.ToList();
            return tasks.Select(t => new TaskResponse
            {
                Id = t.Id,
                Title = t.Title,
                Description = t.Description,
                Status = (int)t.Status,
                AssignedToUserId = t.AssignedToUserId,
                CreatedUserId = t.CreatedUserId,
                TeamId = t.TeamId,
                DueDate = t.DueDate
            }).ToList();
        }
    }
}