using MediatR;
using TMS.Application.features.Task.Get;
using TMS.Application.Entities;

namespace TMS.Application.features.Task.Get
{
    public class GetTaskHandler : IRequestHandler<GetTaskQuery, List<TaskResponse>>
    {
        private readonly IRepository _repository;
        public GetTaskHandler(IRepository repository)
        {
            _repository = repository;
        }
        public async Task<List<TaskResponse>> Handle(GetTaskQuery request, CancellationToken cancellationToken)
        {
            var tasks = _repository.GetTasks(request.TeamId, request.AssignedToUserId, request.Status);
            return tasks.Select(t => new TaskResponse
            {
                Id = t.Id,
                Title = t.Title,
                Description = t.Description,
                Status = (int)t.Status,
                AssignedToUserId = t.AssignedToUserId,
                CreatedUserId = t.CreatedUserId,
                TeamId = t.TeamId,
                DueDate = t.DueDate
            }).ToList();
        }
    }
}